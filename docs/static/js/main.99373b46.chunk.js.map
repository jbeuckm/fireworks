{"version":3,"sources":["reportWebVitals.ts","index.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","canvas","document","getElementById","ctx","getContext","Particle","x","y","vx","vy","color","brightness","type","instance","Constructor","TypeError","this","particles","explode","particle","i","speed","Math","random","angle","PI","push","cos","sin","requestAnimationFrame","frame","clearRect","width","height","nextParticles","l","length","fillStyle","fillRect","addEventListener","e","console","log","code","launch","window","innerHeight","innerWidth"],"mappings":"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","file":"static/js/main.99373b46.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import reportWebVitals from './reportWebVitals'\nimport chroma from 'chroma-js'\n\nconst canvas = document.getElementById('live-canvas') as HTMLCanvasElement\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D\n\nclass Particle {\n  x: number\n  y: number\n  vx: number\n  vy: number\n  color: string\n  brightness: number\n  type: 'shell' | 'ash'\n\n  constructor({ x, y, vx, vy, color, brightness, type }: Particle) {\n    this.x = x\n    this.y = y\n    this.vx = vx\n    this.vy = vy\n    this.color = color\n    this.brightness = brightness\n    this.type = type\n  }\n}\n\nlet particles: Particle[] = []\n\nconst explode = (particle: Particle, particles: Particle[]) => {\n  for (let i = 0; i < 100; i++) {\n    const speed = 2 + 2 * Math.random()\n    const angle = Math.random() * 2 * Math.PI\n    particles.push(\n      new Particle({\n        x: particle.x,\n        y: particle.y,\n        vx: speed * Math.cos(angle),\n        vy: speed * Math.sin(angle),\n        color: particle.color,\n        brightness: 1,\n        type: 'ash',\n      })\n    )\n  }\n}\n\nconst frame = () => {\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n  const nextParticles: Particle[] = []\n\n  for (let i = 0, l = particles.length; i < l; i++) {\n    const particle = particles[i]\n\n    particle.vy -= 0.03\n    particle.x += particle.vx\n    particle.y += particle.vy\n\n    ctx.fillStyle = particle.color\n\n    switch (particle.type) {\n      case 'shell':\n        if (particle.vy > 0.1) {\n          nextParticles.push(particle)\n        } else {\n          explode(particle, nextParticles)\n        }\n        ctx.fillRect(particle.x, height - particle.y, 20, 20)\n        break\n\n      case 'ash':\n        if (particle.y > 0) {\n          nextParticles.push(particle)\n        }\n        ctx.fillRect(particle.x, height - particle.y, 3, 3)\n        break\n    }\n  }\n\n  particles = nextParticles\n\n  requestAnimationFrame(frame)\n}\n\nrequestAnimationFrame(frame)\n\nconst colors = ['#FF00FF', 'blue', 'purple']\n\n// setInterval(() => {\n//   particles.push(\n//     new Particle({\n//       x: Math.random() * width,\n//       y: 10,\n//       vx: Math.random() * 1 - 0.5,\n//       vy: 4 + 2.5 * Math.random(),\n//       color: colors[~~(Math.random() * 3)],\n//       brightness: 1,\n//       type: 'shell',\n//     })\n//   )\n// }, 1000)\n\ndocument.addEventListener('keydown', logKey)\n\nconst launch = (color: string) => {\n  particles.push(\n    new Particle({\n      x: Math.random() * width,\n      y: 10,\n      vx: Math.random() * 1 - 0.5,\n      vy: 4 + 2.5 * Math.random(),\n      color: color,\n      brightness: 1,\n      type: 'shell',\n    })\n  )\n}\n\nfunction logKey(e: KeyboardEvent) {\n  console.log(e.code)\n  switch (e.code) {\n    case 'KeyP':\n      launch('#ff00ff')\n      break\n    case 'KeyG':\n      launch('#00ff00')\n      break\n    case 'KeyB':\n      launch('#0000ff')\n      break\n  }\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n\nconst height = window.innerHeight\nconst width = window.innerWidth\n\ncanvas.width = width\ncanvas.height = height\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}"],"sourceRoot":""}